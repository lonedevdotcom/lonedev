/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lonedev.vlcwebstatusparser;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author hawkric
 */
public class VLCWebStatusParserGUI extends javax.swing.JFrame implements FileUpdaterErrorHandler {
    private Thread fileUpdaterThread;
    private static final String CONFIG_SAVE_PATH = System.getProperty("user.home") + "/vlcwsp.props";
    
    /**
     * Creates new form VLCWebStatusParserGUI
     */
    public VLCWebStatusParserGUI() {
        initComponents();
        reloadPreviousSettingsFromConfigFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        webUrlTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        refreshFrequenctComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        outputFormatTextField = new javax.swing.JTextField();
        outputFormatHelpButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        outputFileTextField = new javax.swing.JTextField();
        outputFileChooserButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        startPollingButton = new javax.swing.JButton();
        stopPollingButton = new javax.swing.JButton();
        copyAlbumArtCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VLC Web Status Updater");
        setResizable(false);

        jLabel1.setText("VLC Web URL:");

        webUrlTextField.setText("http://localhost:8080/requests/status.xml");
        webUrlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webUrlTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Refresh Frequency:");

        refreshFrequenctComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.5 seconds", "1 second", "2 seconds", "3 seconds", "4 seconds", "5 seconds", "10 seconds", "15 seconds", "20 seconds", "30 seconds", "60 seconds" }));
        refreshFrequenctComboBox.setSelectedItem("2 seconds");
        refreshFrequenctComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshFrequenctComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Output Format:");

        outputFormatTextField.setText("{track_number} - {artist}: {title}");

        outputFormatHelpButton.setText("?");
        outputFormatHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFormatHelpButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Output File:");

        outputFileTextField.setEditable(false);

        outputFileChooserButton.setText("...");
        outputFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileChooserButtonActionPerformed(evt);
            }
        });

        statusLabel.setText(" ");
        statusLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        startPollingButton.setText("Start");
        startPollingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPollingButtonActionPerformed(evt);
            }
        });

        stopPollingButton.setText("Stop");
        stopPollingButton.setEnabled(false);
        stopPollingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopPollingButtonActionPerformed(evt);
            }
        });

        copyAlbumArtCheckBox.setText("Copy album art image (if any) to same folder as output file.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(startPollingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopPollingButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(copyAlbumArtCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(outputFileTextField)
                                    .addComponent(outputFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(outputFileChooserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(outputFormatHelpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(refreshFrequenctComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(webUrlTextField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(webUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(refreshFrequenctComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(outputFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFormatHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileChooserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(copyAlbumArtCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPollingButton)
                    .addComponent(stopPollingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void webUrlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webUrlTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_webUrlTextFieldActionPerformed

    private void refreshFrequenctComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFrequenctComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshFrequenctComboBoxActionPerformed

    private void startPollingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPollingButtonActionPerformed
        if (outputFileTextField.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Please select an output file before clicking 'Start'.", "No Ouput File Specified", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        double refreshInterval = Double.parseDouble(refreshFrequenctComboBox.getSelectedItem().toString().split(" ")[0]) * 1000;
        
        fileUpdaterThread = new FileUpdaterThread(webUrlTextField.getText(), (int)refreshInterval, outputFormatTextField.getText(), new File(outputFileTextField.getText()), this, copyAlbumArtCheckBox.isSelected());
        startPollingButton.setEnabled(false);
        stopPollingButton.setEnabled(true);
        statusLabel.setText("Started...");
        setFieldsEnabled(false);
        fileUpdaterThread.start();
        
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                saveSettings();
            }
        });
    }//GEN-LAST:event_startPollingButtonActionPerformed
    
    private void saveSettings() {
        Properties props = new Properties();
        props.put("webUrl", webUrlTextField.getText());
        props.put("refreshFrequency", refreshFrequenctComboBox.getSelectedItem().toString());
        props.put("outputFormat", outputFormatTextField.getText());
        props.put("outputFile", outputFileTextField.getText());
        props.put("copyAlbumArt", Boolean.toString(copyAlbumArtCheckBox.isSelected()));
        
        try {
//            System.out.println("Saving config to " + CONFIG_SAVE_PATH);
            OutputStream propsOutputStream = new FileOutputStream(CONFIG_SAVE_PATH);
            props.store(propsOutputStream, "VLC Web Parser properties");
            propsOutputStream.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void stopPollingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPollingButtonActionPerformed
        if (fileUpdaterThread != null) {
            ((FileUpdaterThread)fileUpdaterThread).stopUpdaterThread();
            stopPollingButton.setEnabled(false);
            startPollingButton.setEnabled(true);
            setFieldsEnabled(true);
            statusLabel.setText("Stopped");
        }
    }//GEN-LAST:event_stopPollingButtonActionPerformed

    private void outputFormatHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFormatHelpButtonActionPerformed
        JOptionPane.showMessageDialog(this, "You can use any of the \"info\" values from the url. Here are the key ones:\n\n\t{description}\n\t{date}\n\t{artist}\n\t{title}\n\t{publisher}\n\t{track_number}\n\t{genre}");
    }//GEN-LAST:event_outputFormatHelpButtonActionPerformed

    private void outputFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileChooserButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnValue = chooser.showSaveDialog(this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            outputFileTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_outputFileChooserButtonActionPerformed

    private void setFieldsEnabled(boolean enabled) {
        webUrlTextField.setEnabled(enabled);
        refreshFrequenctComboBox.setEnabled(enabled);
        outputFileTextField.setEnabled(enabled);
        outputFormatTextField.setEnabled(enabled);
        outputFormatHelpButton.setEnabled(enabled);
        outputFileTextField.setEnabled(enabled);
        outputFileChooserButton.setEnabled(enabled);
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VLCWebStatusParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VLCWebStatusParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VLCWebStatusParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VLCWebStatusParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        Frame f = new VLCWebStatusParserGUI();
        f.pack();
        centreWindow(f);
        f.setVisible(true);
    }
    
    public static void centreWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox copyAlbumArtCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton outputFileChooserButton;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.JButton outputFormatHelpButton;
    private javax.swing.JTextField outputFormatTextField;
    private javax.swing.JComboBox refreshFrequenctComboBox;
    private javax.swing.JButton startPollingButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopPollingButton;
    private javax.swing.JTextField webUrlTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleError(String error) {
        this.statusLabel.setText(error);
        this.startPollingButton.setEnabled(true);
        this.stopPollingButton.setEnabled(false);
        setFieldsEnabled(true);
    }

    private void reloadPreviousSettingsFromConfigFile() {
        File configFile = new File(CONFIG_SAVE_PATH);
        if (configFile.exists()) {
            try {
                InputStream configFileInputStream = new FileInputStream(configFile);
                Properties props = new Properties();
                props.load(configFileInputStream);
                if (props.getProperty("webUrl") != null) {
                    webUrlTextField.setText(props.getProperty("webUrl"));
                }
                
                if (props.getProperty("refreshFrequency") != null) {
                    refreshFrequenctComboBox.setSelectedItem(props.getProperty("refreshFrequency"));
                }
                
                if (props.getProperty("outputFormat") != null) {
                    outputFormatTextField.setText(props.getProperty("outputFormat"));
                }
                
                if (props.getProperty("outputFile") != null) {
                    outputFileTextField.setText(props.getProperty("outputFile"));
                }
                
                if (props.getProperty("copyAlbumArt") != null) {
                    copyAlbumArtCheckBox.setSelected(props.getProperty("copyAlbumArt").toString().equalsIgnoreCase("true"));
                }
                
                configFileInputStream.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
}
