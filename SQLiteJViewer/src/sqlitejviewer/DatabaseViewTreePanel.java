/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatabaseViewTreePanel.java
 *
 * Created on 07-Apr-2011, 11:45:28
 */
package sqlitejviewer;

import javax.swing.JTree;
import javax.swing.tree.*;

/**
 *
 * @author hawkric
 */
public class DatabaseViewTreePanel extends javax.swing.JPanel {

    DefaultMutableTreeNode top;

    /** Creates new form DatabaseViewTreePanel */
    public DatabaseViewTreePanel() {
        createTopLevelNodes();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        databaseViewScrollPane = new javax.swing.JScrollPane();
        databaseViewTree = new JTree(top);

        databaseViewScrollPane.setViewportView(databaseViewTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(databaseViewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(databaseViewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane databaseViewScrollPane;
    private javax.swing.JTree databaseViewTree;
    // End of variables declaration//GEN-END:variables

    private void createTopLevelNodes() {
        top = new DefaultMutableTreeNode("Database");

        DefaultMutableTreeNode tablesTreeNode = new DefaultMutableTreeNode();
        int numTables = populateTablesTreeNode(tablesTreeNode);
        tablesTreeNode.setUserObject("Tables (" + numTables + ")");

        DefaultMutableTreeNode indexesTreeNode = new DefaultMutableTreeNode();
        int numIndexes = populateIndexTreeNode(indexesTreeNode);
        indexesTreeNode.setUserObject("Indexes (" + numIndexes + ")");

        DefaultMutableTreeNode triggersTreeNode = new DefaultMutableTreeNode();
        int numTriggers = populateTriggerTreeNode(triggersTreeNode);
        triggersTreeNode.setUserObject("Triggers (" + numTriggers + ")");

        DefaultMutableTreeNode viewsTreeNode = new DefaultMutableTreeNode();
        int numViews = populateViewsTreeNode(viewsTreeNode);
        viewsTreeNode.setUserObject("Views (" + numViews + ")");

        top.add(tablesTreeNode);
        top.add(indexesTreeNode);
        top.add(triggersTreeNode);
        top.add(viewsTreeNode);
    }

    private int populateTablesTreeNode(DefaultMutableTreeNode tablesTreeNode) {
        int tableCount = 0;

        if (MainFrame.dbInteractor == null) {
            return 0;
        }

        for (DatabaseTableDTO databaseTable : MainFrame.dbInteractor.getDatabaseTables()) {
            DefaultMutableTreeNode tableTreeNode = new DefaultMutableTreeNode(databaseTable);

            for (DatabaseColumnDTO databaseColumn : databaseTable.getColumns()) {
                DefaultMutableTreeNode tableColumnTreeNode = new DefaultMutableTreeNode(databaseColumn);
                tableTreeNode.add(tableColumnTreeNode);
            }

            tableCount++;
            tablesTreeNode.add(tableTreeNode);
        }

        return tableCount;
    }

    private int populateIndexTreeNode(DefaultMutableTreeNode indexesTreeNode) {
        int indexCount = 0;

        if (MainFrame.dbInteractor == null) {
            return 0;
        }

        for (DatabaseIndexDTO databaseIndex : MainFrame.dbInteractor.getDatabaseIndexes()) {
            DefaultMutableTreeNode databaseIndexTreeNode = new DefaultMutableTreeNode(databaseIndex);

            indexCount++;
            indexesTreeNode.add(databaseIndexTreeNode);
        }

        return indexCount;
    }

    private int populateViewsTreeNode(DefaultMutableTreeNode viewsTreeNode) {
        int viewCount = 0;

        if (MainFrame.dbInteractor == null) {
            return 0;
        }

        for (DatabaseViewDTO databaseView : MainFrame.dbInteractor.getDatabaseViews()) {
            DefaultMutableTreeNode databaseViewTreeNode = new DefaultMutableTreeNode(databaseView);

            viewCount++;
            viewsTreeNode.add(databaseViewTreeNode);
        }

        return viewCount;
    }

    public JTree getDatabaseViewTree() {
        return databaseViewTree;
    }

    /**
     * Returns the object that is the selected nodes "userObject"
     * (eg DatabaseObjectDTO, DatabaseColumnDTO etc).
     *
     * @return The userObject of the currently selected node.
     */
    public Object getSelectedNodesUserObject() {
        return ((DefaultMutableTreeNode) databaseViewTree.getLastSelectedPathComponent()).getUserObject();
    }

    private int populateTriggerTreeNode(DefaultMutableTreeNode triggersTreeNode) {
        int triggerCount = 0;

        if (MainFrame.dbInteractor == null) {
            return 0;
        }

        for (DatabaseTriggerDTO databaseTrigger : MainFrame.dbInteractor.getDatabaseTriggers()) {
            DefaultMutableTreeNode databaseTriggerTreeNode = new DefaultMutableTreeNode(databaseTrigger);

            triggerCount++;
            triggersTreeNode.add(databaseTriggerTreeNode);
        }

        return triggerCount;
    }
}
